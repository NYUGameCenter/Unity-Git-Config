#!/bin/sh
# 
# Pre-commit hook script for Unity to ensure meta files stay in sync, as well as check that every folder & file
# marked to be ignored in .gitignore has an entry for its meta file to be ignored too. 
# Based on this: https://github.com/kayy/git-pre-commit-hook-unity-assets & https://github.com/doitian/unity-git-hooks
# 
# 
# After cloning your repo, put this file into directory <your_repo>/.git/hooks. To disable it remove it from there.

ASSETS_DIR="$(git config --get unity3d.assets-dir || echo "Assets")"

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# Redirect output to stderr.
exec 1>&2

# ensure that there's not a >100mb file in this checkin, which github won't allow
CURRENT_DIR="$(pwd)"
HAS_ERROR=""
COMMIT_TEXT=$(git diff --cached --name-only | sort | uniq)
SAVEIFS=$IFS

IFS="
"
for file in $COMMIT_TEXT; do
	file_size=$(du -m $CURRENT_DIR/$file | awk '{print $1}')
	if [ "$file_size" -ge 100 ]; then
		echo "$file is over 100MB."
		HAS_ERROR="1"
	fi
done
IFS=$SAVEIFS

if [ "$HAS_ERROR" != "" ]; then
    echo "Can't commit, fix errors first." >&2
    exit 1
fi

git diff --cached --name-only --diff-filter=A -z $against -- "$ASSETS_DIR" | while read -d $'\0' f; do
	ext="${f##*.}"
	base="${f%.*}"

	if [ "$ext" = "meta" ]; then
		if [ $(git ls-files --cached -- "$base" | wc -l) = 0 ]; then
			cat <<EOF
Error: Redudant meta file.
Meta file \`$f' is added, but \`$base' is not in the git index.
Please add \`$base' to git as well.
EOF
			exit 1
		fi
	else
		p="$f"
		while [ "$p" != "$ASSETS_DIR" ]; do
			if [ $(git ls-files --cached -- "$p.meta" | wc -l) = 0 ]; then
				cat <<EOF
Error: Missing meta file.
Asset \`$f' is added, but \`$p.meta' is not in the git index.
Please add \`$p.meta' to git as well.
EOF
				exit 1
			fi
			p="${p%/*}"
		done
	fi
done

ret="$?"
if [ "$ret" != 0 ]; then
	exit "$ret"
fi

git diff --cached --name-only --diff-filter=D -z $against -- "$ASSETS_DIR" | while read -d $'\0' f; do
	ext="${f##*.}"
	base="${f%.*}"

	if [ "$ext" = "meta" ]; then
		if [ $(git ls-files --cached -- "$base" | wc -l) != 0 ]; then
			cat <<EOF
Error: Redudant meta file.
Meta file \`$f' is removed, but \`$base' is still in the git index.
Please remove \`$base' from git as well.
EOF
			exit 1
		fi
	else
		p="$f"
		while [ "$p" != "$ASSETS_DIR" ]; do
			if [ $(git ls-files --cached -- "$p" | wc -l) = 0 ] && [ $(git ls-files --cached -- "$p.meta" | wc -l) != 0 ]; then
				cat <<EOF
Error: Missing meta file.
Asset \`$f' is removed, but \`$p.meta' is still in the git index.
Please remove \`$p.meta' from git as well.
EOF
				exit 1
			fi
			p="${p%/*}"
		done
	fi
done

ret="$?"
if [ "$ret" != 0 ]; then
	exit "$ret"
fi

## Check if changes to .gitignore include corresponding meta files.
# check if staged files contain .gitignore
if [ ! `git diff --name-only --cached | grep -- "\.gitignore"` ]; then
	# avoid expensive diff actions if there is no change in .gitignore
	exit 0
fi

# new lines have the format {+xxxxx+}. Ignore comments
raw_diff_output=`git diff --cached --word-diff=plain .gitignore | egrep -x "\{\+[^#.].*[^*]\+\}"`

# prepare two strings: one for directories and one for meta files
for raw_entry in $raw_diff_output; do
	# strip leading and trailing separator "{+" and "+}"
	if ((${#raw_entry} <= 4)); then
		continue
	else
		e=${raw_entry:2:$((${#raw_entry}-4))}
		is_meta=$((`echo $e | egrep ".*meta" | wc -l`))
		if [ $is_meta -eq 0 ]; then
			diff_output_dirs="${diff_output_dirs} ${e}"
		else
			diff_output_metas="${diff_output_metas} ${e}"
		fi
	fi
done

# iterate over directories and check if there is an entry for the appropriate meta file
for i in $diff_output_dirs; do 
	# meta file entries are often without directory, so strip the path
	base_name=`basename $i`
	echo "$i"
	has_meta_ignore=$((`echo $diff_output_metas | grep -F -- "$base_name.meta" | wc -l`))
	if [ ${has_meta_ignore} -eq 0 ]; then
		# Check if the full path name meta is included.
		has_meta_ignore=$((`echo $diff_output_metas | grep -F -- "${i%/}.meta" | wc -l`))
	fi
	if [ ${has_meta_ignore} -eq 0 ]; then
		echo "${i} found in .gitignore but not the corresponding meta file! Please add ${i%/}.meta or ${base_name}.meta to .gitignore"
		exit 1
	fi
done
